import {
  Button,
  Col,
  Container,
  Image,
  Input,
  Radio,
  Row,
  Text,
  Textarea,
} from "@nextui-org/react";
import dynamic from "next/dynamic";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { FaAngleLeft, FaPlus, FaTrash, FaUpload } from "react-icons/fa";

const QuillNoSSRWrapper = dynamic(import("react-quill"), {
  ssr: false,
  loading: () => <p>Loading ...</p>,
});

import "react-quill/dist/quill.snow.css";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { addEventAction } from "../../redux/actionCreators/event.actionCreator";

const modules = {
  toolbar: [
    [{ header: "1" }, { header: "2" }, { font: [] }],
    [{ size: [] }],
    ["bold", "italic", "underline", "strike", "blockquote"],
    [
      { list: "ordered" },
      { list: "bullet" },
      { indent: "-1" },
      { indent: "+1" },
    ],
    ["link", "image", "video"],
    ["clean"],
  ],
  clipboard: {
    matchVisual: false,
  },
};
const formats = [
  "header",
  "font",
  "size",
  "bold",
  "italic",
  "underline",
  "strike",
  "blockquote",
  "list",
  "bullet",
  "indent",
  "link",
  "image",
  "video",
];

const CreateEvent = () => {
  const { organizations, isAuthenticated, userId } = useSelector((state) => ({
    organizations: state.organization.organizations.filter((organization) =>
      organization?.members?.indexOf({
        _id: state.auth.user._id,
        role: [],
      })
    ),
    isAuthenticated: state.auth.isAuthenticated,
    userId: state.auth.user?._id,
  }));

  const router = useRouter();
  const dispatch = useDispatch();

  const [socialLinks, setSocialLinks] = useState([
    {
      name: "",
      link: "",
    },
  ]);

  const [eventMode, setEventMode] = useState("online");
  const [isPaid, setIsPaid] = useState(false);

  const [name, setName] = useState("");
  const [organizationId, setOrganizationId] = useState("");
  const [description, setDescription] = useState("");
  const [address, setAddress] = useState("");
  const [city, setCity] = useState("");
  const [state, setState] = useState("");
  const [meetingLink, setMeetingLink] = useState("");
  const [banner, setBanner] = useState("");
  const [hasAddToCalendar, setHasAddToCalendar] = useState(false);
  const [eventType, setEventType] = useState("");
  const [amount, setAmount] = useState(0);
  const [timing, setTiming] = useState({
    startData: "",
    endDate: "",
  });
  const [success, setSuccess] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();

    if (
      !name ||
      !organizationId ||
      !description ||
      !address ||
      !city ||
      !state ||
      !eventType ||
      !timing
    ) {
      return toast.error("Please fill all the fields");
    }

    const event = {
      name,
      organizationId,
      description,
      address,
      city,
      state,
      linkSocial: socialLinks,
      attendanceMode: eventMode,
      meetingLink,
      banner,
      hasAddToCalendar,
      eventType,
      isPaid,
      amount,
      timing,
    };

    dispatch(addEventAction(event, setSuccess));
  };

  if (!isAuthenticated) {
    return (
      <div>
        <Head>
          <title>Create Event | Event Bus</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
          <h1>
            You are not authorized to access this page. Please login to
            continue.
          </h1>
        </main>
      </div>
    );
  }

  return (
    <div>
      <Head>
        <title>Create Event | Event Bus</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <form
          style={{
            paddingBottom: "4rem",
          }}
          onSubmit={handleSubmit}
        >
          <Container
            fluid
            css={{
              padding: 0,
            }}
          >
            <Row
              fluid
              css={{
                padding: 0,
                height: "70vh",
                position: "relative",
              }}
            >
              <Image
                width={"100%"}
                height={"100%"}
                src="https://github.com/nextui-org/nextui/blob/next/apps/docs/public/nextui-banner.jpeg?raw=true"
                alt="Default Image"
                objectFit="cover"
              />
              <Button
                auto
                type="button"
                color="secondary"
                css={{
                  position: "absolute",
                  bottom: "0",
                  width: "100%",
                  borderRadius: 0,
                }}
              >
                <FaUpload />
                Upload Banner
              </Button>
            </Row>

            <Row
              css={{
                padding: "3rem",
              }}
              justify="space-between"
              align="center"
            >
              <Col span={4}>
                <Input
                  placeholder="Event Name"
                  underlined
                  clearable
                  type="text"
                  width="100%"
                  size="large"
                  css={{
                    marginTop: "1rem",
                    fontSize: "3rem",
                  }}
                  required
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
              </Col>

              <Col span={2}>
                <Button
                  type="button"
                  onClick={() => router.back()}
                  color="primary"
                >
                  <FaAngleLeft />
                  Go Back
                </Button>
              </Col>
            </Row>
            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
              }}
            >
              <Col span={11}>
                <Text h3>Event Description</Text>
              </Col>
            </Row>
            <Row justify="center">
              <Col
                span={11}
                css={{
                  height: "500px",
                }}
              >
                <QuillNoSSRWrapper
                  modules={modules}
                  formats={formats}
                  theme="snow"
                  placeholder="Enter description"
                  style={{
                    height: "100%",
                  }}
                  value={description}
                  onChange={(e) => setDescription(e)}
                />
              </Col>
            </Row>
            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col span={3}>
                <Text h3>Choose Organization:</Text>
              </Col>
              <Col span={8}>
                <select
                  style={{
                    width: "100%",
                    height: "3rem",
                    fontSize: "1.5rem",
                    padding: "0.5rem",
                  }}
                  value={organizationId}
                  defaultValue={organizationId}
                  onChange={(e) => setOrganizationId(e.target.value)}
                >
                  <option value="">Select Organization</option>
                  {organizations?.map((organization) => (
                    <option key={organization._id} value={organization._id}>
                      {organization.name}
                    </option>
                  ))}
                </select>
              </Col>
            </Row>
            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col span={3}>
                <Text h3>Event Location:</Text>
              </Col>
              {/* add city, address, state, country */}

              <Col span={4}>
                <Input
                  placeholder="City"
                  underlined
                  clearable
                  type="text"
                  width="100%"
                  size={"md"}
                  css={{
                    marginTop: "1rem",
                    fontSize: "0.99rem",
                  }}
                  required
                  value={city}
                  onChange={(e) => setCity(e.target.value)}
                />
              </Col>
              <Col span={4}>
                <Input
                  placeholder="State"
                  underlined
                  clearable
                  type="text"
                  width="100%"
                  size={"md"}
                  css={{
                    marginTop: "1rem",
                    fontSize: "0.99rem",
                  }}
                  required
                  value={state}
                  onChange={(e) => setState(e.target.value)}
                />
              </Col>
            </Row>
            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col span={3}>
                <Text h3>Event Address:</Text>
              </Col>
              <Col span={8}>
                <Textarea
                  placeholder="Address"
                  underlined
                  clearable
                  type="text"
                  width="100%"
                  size={"md"}
                  css={{
                    marginTop: "1rem",
                    fontSize: "0.99rem",
                  }}
                  required
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                />
              </Col>
            </Row>

            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col span={3}>
                <Text h3>Event Date:</Text>
              </Col>
              <Col span={4}>
                <Input
                  label="Start Date"
                  underlined
                  clearable
                  type="datetime-local"
                  width="100%"
                  size={"md"}
                  css={{
                    marginTop: "1rem",
                    fontSize: "0.99rem",
                  }}
                  required
                  value={timing.startDate}
                  onChange={(e) =>
                    setTiming({ ...timing, startDate: e.target.value })
                  }
                />
              </Col>
              <Col span={4}>
                <Input
                  label="End Date"
                  underlined
                  clearable
                  type="datetime-local"
                  width="100%"
                  size={"md"}
                  css={{
                    marginTop: "1rem",
                    fontSize: "0.99rem",
                  }}
                  required
                  value={timing.endDate}
                  onChange={(e) =>
                    setTiming({ ...timing, endDate: e.target.value })
                  }
                />
              </Col>
            </Row>

            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col span={3}>
                <Text h3>Social Links:</Text>
              </Col>
              <Col span={8}>
                {socialLinks.map((link, index) => (
                  <Row
                    key={index * 545}
                    justify="space-between"
                    align="center"
                    css={{
                      marginTop: "1rem",
                    }}
                  >
                    <Col span={4}>
                      <Input
                        placeholder="name"
                        underlined
                        clearable
                        type="text"
                        width="100%"
                        size={"md"}
                        css={{
                          marginTop: "1rem",
                          fontSize: "0.99rem",
                        }}
                        required
                        value={link.name}
                        onChange={(e) => {
                          const newLinks = [...socialLinks];
                          newLinks[index].name = e.target.value;
                          setSocialLinks(newLinks);
                        }}
                      />
                    </Col>
                    <Col span={4}>
                      <Input
                        placeholder="link"
                        underlined
                        clearable
                        type="url"
                        width="100%"
                        size={"md"}
                        css={{
                          marginTop: "1rem",
                          fontSize: "0.99rem",
                        }}
                        required
                        value={link.link}
                        onChange={(e) => {
                          const newLinks = [...socialLinks];
                          newLinks[index].link = e.target.value;
                          setSocialLinks(newLinks);
                        }}
                      />
                    </Col>
                    <Col span={2}>
                      <Row justify="center" align="center" gap={2}>
                        {socialLinks.length > 1 && (
                          <Button
                            type="button"
                            onClick={() => {
                              setSocialLinks((prev) => {
                                const newLinks = [...prev];
                                newLinks.splice(index, 1);
                                return newLinks;
                              });
                            }}
                            size="xs"
                            color="error"
                          >
                            <FaTrash />
                          </Button>
                        )}

                        {socialLinks.length - 1 === index && (
                          <Button
                            type="button"
                            onClick={() => {
                              setSocialLinks((prev) => {
                                const newLinks = [...prev];
                                newLinks.push({
                                  name: "",
                                  link: "",
                                });
                                return newLinks;
                              });
                            }}
                            color="success"
                            size="xs"
                          >
                            <FaPlus />
                          </Button>
                        )}
                      </Row>
                    </Col>
                  </Row>
                ))}
              </Col>
            </Row>

            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col span={4}>
                <Text h3>Event Mode:</Text>
              </Col>
              <Col span={7}>
                <Radio.Group
                  defaultChecked="online"
                  value={eventMode}
                  onChange={(e) => {
                    setEventMode(e);
                  }}
                >
                  <Row justify="space-between" align="center" gap={2}>
                    <Radio value="online">Online</Radio>
                    <Radio value="offline">Offline</Radio>
                    <Radio value="hybrid">Hybrid</Radio>
                  </Row>
                </Radio.Group>
              </Col>
            </Row>

            {eventMode === "online" || eventMode === "hybrid" ? (
              <Row
                justify="center"
                css={{
                  paddingTop: "1rem",
                  paddingBottom: "1rem",
                  marginTop: "4rem",
                }}
                gap={2}
                align="flex-end"
              >
                <Col span={3}>
                  <Text h3>Meeting Link:</Text>
                </Col>
                <Col span={8}>
                  <Input
                    placeholder="Meeting Link"
                    underlined
                    clearable
                    type="url"
                    width="100%"
                    size={"md"}
                    css={{
                      marginTop: "1rem",
                      fontSize: "0.99rem",
                    }}
                    required
                    value={meetingLink}
                    onChange={(e) => setMeetingLink(e.target.value)}
                  />
                </Col>
              </Row>
            ) : null}

            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col span={3}>
                <Text h3>Is Event Paid?:</Text>
              </Col>
              <Col span={8}>
                <Radio.Group
                  defaultChecked={false}
                  value={isPaid}
                  onChange={(e) => {
                    setIsPaid(e);
                  }}
                >
                  <Radio value={false}>No</Radio>
                  <Radio value={true}>Yes</Radio>
                </Radio.Group>
              </Col>
            </Row>

            {isPaid && (
              <Row
                justify="center"
                css={{
                  paddingTop: "1rem",
                  paddingBottom: "1rem",
                  marginTop: "4rem",
                }}
                gap={2}
                align="flex-end"
              >
                <Col span={3}>
                  <Text h3>Event Price:</Text>
                </Col>
                <Col span={8}>
                  <Input
                    placeholder="Event Price"
                    underlined
                    clearable
                    type="number"
                    width="100%"
                    size={"md"}
                    css={{
                      marginTop: "1rem",
                      fontSize: "0.99rem",
                    }}
                    required
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                  />
                </Col>
              </Row>
            )}

            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "1rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col span={3}>
                <Text h3>Event Type:</Text>
              </Col>
              <Col span={8}>
                <Radio.Group
                  defaultChecked="session"
                  value={eventType}
                  onChange={(e) => {
                    setEventType(e);
                  }}
                >
                  <Radio value="session">Session</Radio>
                  <Radio value="workshop">Workshop</Radio>
                  <Radio value="meetup">Meet Up</Radio>
                  <Radio value="hackathon">Hackathon</Radio>
                  <Radio value="conference">Conference</Radio>
                  <Radio value="other">Other</Radio>
                </Radio.Group>
              </Col>
            </Row>

            {/* submit  */}
            <Row
              justify="center"
              css={{
                paddingTop: "1rem",
                paddingBottom: "4rem",
                marginTop: "4rem",
              }}
              gap={2}
              align="flex-end"
            >
              <Col
                span={11}
                css={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                }}
              >
                <Button
                  type="submit"
                  color="success"
                  size="lg"
                  css={{
                    width: "100%",
                  }}
                >
                  Create Event
                </Button>
              </Col>
            </Row>
          </Container>
        </form>
      </main>
    </div>
  );
};

export default CreateEvent;
